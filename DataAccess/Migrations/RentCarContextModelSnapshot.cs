// <auto-generated />
using System;
using DataAccess.Concrete.EntityFramework.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataAccess.Migrations
{
    [DbContext(typeof(RentCarContext))]
    partial class RentCarContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Entity.Concrete.Brand", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("smalldatetime");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("ID");

                    b.ToTable("Brands", (string)null);

                    b.HasData(
                        new
                        {
                            ID = 1,
                            CreatedDate = new DateTime(2022, 7, 13, 14, 21, 11, 720, DateTimeKind.Local).AddTicks(4899),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2022, 7, 13, 14, 21, 11, 720, DateTimeKind.Local).AddTicks(4900),
                            Name = "Hyundai"
                        },
                        new
                        {
                            ID = 2,
                            CreatedDate = new DateTime(2022, 7, 13, 14, 21, 11, 720, DateTimeKind.Local).AddTicks(4903),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2022, 7, 13, 14, 21, 11, 720, DateTimeKind.Local).AddTicks(4904),
                            Name = "Bmw"
                        },
                        new
                        {
                            ID = 3,
                            CreatedDate = new DateTime(2022, 7, 13, 14, 21, 11, 720, DateTimeKind.Local).AddTicks(4906),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2022, 7, 13, 14, 21, 11, 720, DateTimeKind.Local).AddTicks(4906),
                            Name = "Volvo"
                        },
                        new
                        {
                            ID = 4,
                            CreatedDate = new DateTime(2022, 7, 13, 14, 21, 11, 720, DateTimeKind.Local).AddTicks(4909),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2022, 7, 13, 14, 21, 11, 720, DateTimeKind.Local).AddTicks(4909),
                            Name = "Renault"
                        },
                        new
                        {
                            ID = 5,
                            CreatedDate = new DateTime(2022, 7, 13, 14, 21, 11, 720, DateTimeKind.Local).AddTicks(4911),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2022, 7, 13, 14, 21, 11, 720, DateTimeKind.Local).AddTicks(4912),
                            Name = "Opel"
                        },
                        new
                        {
                            ID = 6,
                            CreatedDate = new DateTime(2022, 7, 13, 14, 21, 11, 720, DateTimeKind.Local).AddTicks(4914),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2022, 7, 13, 14, 21, 11, 720, DateTimeKind.Local).AddTicks(4914),
                            Name = "Fiat"
                        });
                });

            modelBuilder.Entity("Entity.Concrete.Car", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<int>("CarModelId")
                        .HasColumnType("int");

                    b.Property<int>("ColorId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("smalldatetime");

                    b.Property<int>("CurrentCount")
                        .HasColumnType("int");

                    b.Property<int>("DailyPrice")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("FuelType")
                        .HasColumnType("int");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModelYear")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("smalldatetime");

                    b.Property<int>("TotalCount")
                        .HasColumnType("int");

                    b.Property<int>("TransmissionType")
                        .HasColumnType("int");

                    b.Property<int>("VehicleType")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("CarModelId");

                    b.HasIndex("ColorId");

                    b.ToTable("Cars", (string)null);

                    b.HasData(
                        new
                        {
                            ID = 1,
                            CarModelId = 1,
                            ColorId = 1,
                            CreatedDate = new DateTime(2022, 7, 13, 14, 21, 11, 720, DateTimeKind.Local).AddTicks(9647),
                            CurrentCount = 3,
                            DailyPrice = 800,
                            Description = "Temiz aile arabası",
                            FuelType = 0,
                            Image = "https://s.yauto.cz/m/obrazky/hih/0019/hyundai-i20-306110-M-789242797-1.jpg",
                            IsDeleted = false,
                            ModelYear = new DateTime(2015, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedDate = new DateTime(2022, 7, 13, 14, 21, 11, 720, DateTimeKind.Local).AddTicks(9648),
                            TotalCount = 3,
                            TransmissionType = 1,
                            VehicleType = 1
                        },
                        new
                        {
                            ID = 2,
                            CarModelId = 1,
                            ColorId = 3,
                            CreatedDate = new DateTime(2022, 7, 13, 14, 21, 11, 720, DateTimeKind.Local).AddTicks(9656),
                            CurrentCount = 1,
                            DailyPrice = 800,
                            Description = "Temiz aile arabası",
                            FuelType = 0,
                            Image = "https://i0.shbdn.com/photos/73/43/28/x5_103173432829h.jpg",
                            IsDeleted = false,
                            ModelYear = new DateTime(2014, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedDate = new DateTime(2022, 7, 13, 14, 21, 11, 720, DateTimeKind.Local).AddTicks(9657),
                            TotalCount = 1,
                            TransmissionType = 1,
                            VehicleType = 1
                        },
                        new
                        {
                            ID = 3,
                            CarModelId = 2,
                            ColorId = 2,
                            CreatedDate = new DateTime(2022, 7, 13, 14, 21, 11, 720, DateTimeKind.Local).AddTicks(9661),
                            CurrentCount = 6,
                            DailyPrice = 950,
                            Description = "Yeni aile arabası",
                            FuelType = 0,
                            Image = "https://file.ikinciyeni.com/carphotos/34re2824/DetailImage/ikinci-el-satilik-renault-clio-48-045dfa.jpg?v1",
                            IsDeleted = false,
                            ModelYear = new DateTime(2018, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedDate = new DateTime(2022, 7, 13, 14, 21, 11, 720, DateTimeKind.Local).AddTicks(9662),
                            TotalCount = 6,
                            TransmissionType = 1,
                            VehicleType = 1
                        },
                        new
                        {
                            ID = 4,
                            CarModelId = 2,
                            ColorId = 1,
                            CreatedDate = new DateTime(2022, 7, 13, 14, 21, 11, 720, DateTimeKind.Local).AddTicks(9664),
                            CurrentCount = 6,
                            DailyPrice = 980,
                            Description = "Yeni beyaz clio",
                            FuelType = 0,
                            Image = "https://www.yildirayrentacar.com/dosya/2080/sinif/13-56-17-renault-clio-benzin.jpg",
                            IsDeleted = false,
                            ModelYear = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedDate = new DateTime(2022, 7, 13, 14, 21, 11, 720, DateTimeKind.Local).AddTicks(9665),
                            TotalCount = 6,
                            TransmissionType = 1,
                            VehicleType = 1
                        },
                        new
                        {
                            ID = 5,
                            CarModelId = 3,
                            ColorId = 3,
                            CreatedDate = new DateTime(2022, 7, 13, 14, 21, 11, 720, DateTimeKind.Local).AddTicks(9668),
                            CurrentCount = 2,
                            DailyPrice = 1050,
                            Description = "Yeni siyah megane",
                            FuelType = 0,
                            Image = "https://bufilo.com/storage/aylik-kiralik-megane-renault-bufilo-arac-kiralama-istanbul-600-250.png",
                            IsDeleted = false,
                            ModelYear = new DateTime(2021, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedDate = new DateTime(2022, 7, 13, 14, 21, 11, 720, DateTimeKind.Local).AddTicks(9668),
                            TotalCount = 2,
                            TransmissionType = 1,
                            VehicleType = 0
                        },
                        new
                        {
                            ID = 6,
                            CarModelId = 3,
                            ColorId = 1,
                            CreatedDate = new DateTime(2022, 7, 13, 14, 21, 11, 720, DateTimeKind.Local).AddTicks(9671),
                            CurrentCount = 2,
                            DailyPrice = 1050,
                            Description = "Yeni beyaz megane",
                            FuelType = 0,
                            Image = "https://zugo2.mncdn.com/mnresize/800/-/Images/Arac/b/410/283507/2175813.jpg",
                            IsDeleted = false,
                            ModelYear = new DateTime(2021, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedDate = new DateTime(2022, 7, 13, 14, 21, 11, 720, DateTimeKind.Local).AddTicks(9671),
                            TotalCount = 2,
                            TransmissionType = 1,
                            VehicleType = 0
                        },
                        new
                        {
                            ID = 7,
                            CarModelId = 4,
                            ColorId = 1,
                            CreatedDate = new DateTime(2022, 7, 13, 14, 21, 11, 720, DateTimeKind.Local).AddTicks(9674),
                            CurrentCount = 4,
                            DailyPrice = 1100,
                            Description = "Ucuz yakıt egea",
                            FuelType = 1,
                            Image = "https://ersanrentacar.com/yuklemeler/2015/10/fiat-egea-bulut-beyazi-2.jpg",
                            IsDeleted = false,
                            ModelYear = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedDate = new DateTime(2022, 7, 13, 14, 21, 11, 720, DateTimeKind.Local).AddTicks(9675),
                            TotalCount = 4,
                            TransmissionType = 0,
                            VehicleType = 0
                        },
                        new
                        {
                            ID = 8,
                            CarModelId = 4,
                            ColorId = 2,
                            CreatedDate = new DateTime(2022, 7, 13, 14, 21, 11, 720, DateTimeKind.Local).AddTicks(9677),
                            CurrentCount = 3,
                            DailyPrice = 1100,
                            Description = "Ucuz yakıt egea",
                            FuelType = 1,
                            Image = "https://zugo2.mncdn.com/mnresize/800/-/Images/Arac/b/410/251987/1913579.jpg",
                            IsDeleted = false,
                            ModelYear = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedDate = new DateTime(2022, 7, 13, 14, 21, 11, 720, DateTimeKind.Local).AddTicks(9678),
                            TotalCount = 3,
                            TransmissionType = 0,
                            VehicleType = 0
                        },
                        new
                        {
                            ID = 9,
                            CarModelId = 5,
                            ColorId = 4,
                            CreatedDate = new DateTime(2022, 7, 13, 14, 21, 11, 720, DateTimeKind.Local).AddTicks(9681),
                            CurrentCount = 1,
                            DailyPrice = 1090,
                            Description = "hızlı opel astra",
                            FuelType = 0,
                            Image = "https://i0.shbdn.com/photos/20/05/44/1032200544t8b.jpg",
                            IsDeleted = false,
                            ModelYear = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedDate = new DateTime(2022, 7, 13, 14, 21, 11, 720, DateTimeKind.Local).AddTicks(9681),
                            TotalCount = 1,
                            TransmissionType = 1,
                            VehicleType = 0
                        },
                        new
                        {
                            ID = 10,
                            CarModelId = 5,
                            ColorId = 5,
                            CreatedDate = new DateTime(2022, 7, 13, 14, 21, 11, 720, DateTimeKind.Local).AddTicks(9684),
                            CurrentCount = 1,
                            DailyPrice = 1150,
                            Description = "opel özel renk mavi",
                            FuelType = 0,
                            Image = "https://www.arackaplama.com/wp-content/uploads/2017/12/IMAG2542.jpg",
                            IsDeleted = false,
                            ModelYear = new DateTime(2017, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedDate = new DateTime(2022, 7, 13, 14, 21, 11, 720, DateTimeKind.Local).AddTicks(9684),
                            TotalCount = 1,
                            TransmissionType = 0,
                            VehicleType = 0
                        },
                        new
                        {
                            ID = 11,
                            CarModelId = 6,
                            ColorId = 2,
                            CreatedDate = new DateTime(2022, 7, 13, 14, 21, 11, 720, DateTimeKind.Local).AddTicks(9687),
                            CurrentCount = 4,
                            DailyPrice = 1500,
                            Description = "spor yarış arabası",
                            FuelType = 0,
                            Image = "https://upload.wikimedia.org/wikipedia/commons/e/e9/2016_BMW_i8.jpg",
                            IsDeleted = false,
                            ModelYear = new DateTime(2022, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedDate = new DateTime(2022, 7, 13, 14, 21, 11, 720, DateTimeKind.Local).AddTicks(9688),
                            TotalCount = 4,
                            TransmissionType = 1,
                            VehicleType = 5
                        },
                        new
                        {
                            ID = 12,
                            CarModelId = 6,
                            ColorId = 5,
                            CreatedDate = new DateTime(2022, 7, 13, 14, 21, 11, 720, DateTimeKind.Local).AddTicks(9691),
                            CurrentCount = 7,
                            DailyPrice = 1250,
                            Description = "spor yarış arabası",
                            FuelType = 1,
                            Image = "https://upload.wikimedia.org/wikipedia/commons/9/93/2015_BMW_i8_%2820039281571%29_%282%29.jpg",
                            IsDeleted = false,
                            ModelYear = new DateTime(2015, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedDate = new DateTime(2022, 7, 13, 14, 21, 11, 720, DateTimeKind.Local).AddTicks(9691),
                            TotalCount = 7,
                            TransmissionType = 1,
                            VehicleType = 5
                        });
                });

            modelBuilder.Entity("Entity.Concrete.CarModel", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<int>("BrandId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("smalldatetime");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("ID");

                    b.HasIndex("BrandId");

                    b.ToTable("CarModels", (string)null);

                    b.HasData(
                        new
                        {
                            ID = 1,
                            BrandId = 1,
                            CreatedDate = new DateTime(2022, 7, 13, 14, 21, 11, 721, DateTimeKind.Local).AddTicks(1910),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2022, 7, 13, 14, 21, 11, 721, DateTimeKind.Local).AddTicks(1911),
                            Name = "i20"
                        },
                        new
                        {
                            ID = 2,
                            BrandId = 4,
                            CreatedDate = new DateTime(2022, 7, 13, 14, 21, 11, 721, DateTimeKind.Local).AddTicks(1914),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2022, 7, 13, 14, 21, 11, 721, DateTimeKind.Local).AddTicks(1915),
                            Name = "Clio"
                        },
                        new
                        {
                            ID = 3,
                            BrandId = 4,
                            CreatedDate = new DateTime(2022, 7, 13, 14, 21, 11, 721, DateTimeKind.Local).AddTicks(1917),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2022, 7, 13, 14, 21, 11, 721, DateTimeKind.Local).AddTicks(1918),
                            Name = "Megane"
                        },
                        new
                        {
                            ID = 4,
                            BrandId = 6,
                            CreatedDate = new DateTime(2022, 7, 13, 14, 21, 11, 721, DateTimeKind.Local).AddTicks(1920),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2022, 7, 13, 14, 21, 11, 721, DateTimeKind.Local).AddTicks(1920),
                            Name = "Egea"
                        },
                        new
                        {
                            ID = 5,
                            BrandId = 5,
                            CreatedDate = new DateTime(2022, 7, 13, 14, 21, 11, 721, DateTimeKind.Local).AddTicks(1922),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2022, 7, 13, 14, 21, 11, 721, DateTimeKind.Local).AddTicks(1923),
                            Name = "Astra"
                        },
                        new
                        {
                            ID = 6,
                            BrandId = 2,
                            CreatedDate = new DateTime(2022, 7, 13, 14, 21, 11, 721, DateTimeKind.Local).AddTicks(1925),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2022, 7, 13, 14, 21, 11, 721, DateTimeKind.Local).AddTicks(1926),
                            Name = "i8"
                        });
                });

            modelBuilder.Entity("Entity.Concrete.Color", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("smalldatetime");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("ID");

                    b.ToTable("Colors", (string)null);

                    b.HasData(
                        new
                        {
                            ID = 1,
                            CreatedDate = new DateTime(2022, 7, 13, 14, 21, 11, 721, DateTimeKind.Local).AddTicks(2900),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2022, 7, 13, 14, 21, 11, 721, DateTimeKind.Local).AddTicks(2900),
                            Name = "Beyaz"
                        },
                        new
                        {
                            ID = 2,
                            CreatedDate = new DateTime(2022, 7, 13, 14, 21, 11, 721, DateTimeKind.Local).AddTicks(2903),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2022, 7, 13, 14, 21, 11, 721, DateTimeKind.Local).AddTicks(2903),
                            Name = "Gri"
                        },
                        new
                        {
                            ID = 3,
                            CreatedDate = new DateTime(2022, 7, 13, 14, 21, 11, 721, DateTimeKind.Local).AddTicks(2906),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2022, 7, 13, 14, 21, 11, 721, DateTimeKind.Local).AddTicks(2906),
                            Name = "Siyah"
                        },
                        new
                        {
                            ID = 4,
                            CreatedDate = new DateTime(2022, 7, 13, 14, 21, 11, 721, DateTimeKind.Local).AddTicks(2908),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2022, 7, 13, 14, 21, 11, 721, DateTimeKind.Local).AddTicks(2909),
                            Name = "Kırmızı"
                        },
                        new
                        {
                            ID = 5,
                            CreatedDate = new DateTime(2022, 7, 13, 14, 21, 11, 721, DateTimeKind.Local).AddTicks(2911),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2022, 7, 13, 14, 21, 11, 721, DateTimeKind.Local).AddTicks(2911),
                            Name = "Mavi"
                        });
                });

            modelBuilder.Entity("Entity.Concrete.Comment", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("LikeCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("smalldatetime");

                    b.Property<short>("Star")
                        .HasColumnType("smallint");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("UserId");

                    b.ToTable("Comments", (string)null);
                });

            modelBuilder.Entity("Entity.Concrete.Payment", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("smalldatetime");

                    b.Property<short>("DayCount")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPaid")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("smalldatetime");

                    b.Property<int>("SaleId")
                        .HasColumnType("int");

                    b.Property<int>("TotalPrice")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("SaleId")
                        .IsUnique();

                    b.ToTable("Payments", (string)null);
                });

            modelBuilder.Entity("Entity.Concrete.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Entity.Concrete.RoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Entity.Concrete.Sale", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<int>("CarId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime>("EODDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsCancelled")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime>("ReservationDate")
                        .HasColumnType("smalldatetime");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("CarId");

                    b.HasIndex("UserId");

                    b.ToTable("Sales", (string)null);
                });

            modelBuilder.Entity("Entity.Concrete.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Entity.Concrete.UserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Entity.Concrete.UserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Entity.Concrete.UserRole", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Entity.Concrete.UserToken", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Entity.Concrete.Car", b =>
                {
                    b.HasOne("Entity.Concrete.CarModel", "CarModel")
                        .WithMany("Cars")
                        .HasForeignKey("CarModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity.Concrete.Color", "Color")
                        .WithMany("Cars")
                        .HasForeignKey("ColorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CarModel");

                    b.Navigation("Color");
                });

            modelBuilder.Entity("Entity.Concrete.CarModel", b =>
                {
                    b.HasOne("Entity.Concrete.Brand", "Brand")
                        .WithMany("CarModels")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brand");
                });

            modelBuilder.Entity("Entity.Concrete.Comment", b =>
                {
                    b.HasOne("Entity.Concrete.User", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Entity.Concrete.Payment", b =>
                {
                    b.HasOne("Entity.Concrete.Sale", "Sale")
                        .WithOne("Payment")
                        .HasForeignKey("Entity.Concrete.Payment", "SaleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sale");
                });

            modelBuilder.Entity("Entity.Concrete.RoleClaim", b =>
                {
                    b.HasOne("Entity.Concrete.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Entity.Concrete.Sale", b =>
                {
                    b.HasOne("Entity.Concrete.Car", "Car")
                        .WithMany("Sales")
                        .HasForeignKey("CarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity.Concrete.User", "User")
                        .WithMany("Sales")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Car");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Entity.Concrete.UserClaim", b =>
                {
                    b.HasOne("Entity.Concrete.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Entity.Concrete.UserLogin", b =>
                {
                    b.HasOne("Entity.Concrete.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Entity.Concrete.UserRole", b =>
                {
                    b.HasOne("Entity.Concrete.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity.Concrete.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Entity.Concrete.UserToken", b =>
                {
                    b.HasOne("Entity.Concrete.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Entity.Concrete.Brand", b =>
                {
                    b.Navigation("CarModels");
                });

            modelBuilder.Entity("Entity.Concrete.Car", b =>
                {
                    b.Navigation("Sales");
                });

            modelBuilder.Entity("Entity.Concrete.CarModel", b =>
                {
                    b.Navigation("Cars");
                });

            modelBuilder.Entity("Entity.Concrete.Color", b =>
                {
                    b.Navigation("Cars");
                });

            modelBuilder.Entity("Entity.Concrete.Sale", b =>
                {
                    b.Navigation("Payment");
                });

            modelBuilder.Entity("Entity.Concrete.User", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Sales");
                });
#pragma warning restore 612, 618
        }
    }
}
